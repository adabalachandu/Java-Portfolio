{"name":"Java-portfolio","tagline":"These are some challenging java programs and kind of awesome!","body":"Welcome to my Java Portfolio! Here is the list of some of the problem statement that I solved using Amazing Java!\r\n\r\n## 1. Cracking the coding interview\r\n\r\nThis is a practice book on interview coding questions. I solved some of the problems from this book. Here is the list->\r\n\r\n### 1. String Processing - [View Code](https://github.com/rajeshsurana/Java-Portfolio/blob/master/crackingTheCodingInterview/StringPrac/src/stringprac/StringPrac.java)\r\n\r\n* Implement an algorithm to determine if a string has all unique characters. What if you cannot use additional data structures?\r\n* Given two strings, write a method to decide if one is a permutation of the other.\r\n* Write a method to replace all spaces in a string with '%20'. You may assume that the string has sufficient space at the end of the string to hold the additional characters, and that you are given the \"true\" length of the string. (Note: if implementing in Java, please use a character array so that you can perform this operation in place.)\r\n* Implement a method to perform basic string compression using the counts of repeated characters. For example, the string aabcccccaaa would become a2blc5a3. If the \"compressed\" string would not become smaller than the original string, your method should return the original string.\r\n* Assume you have a method isSubstring which checks if one word is a substring of another. Given two strings, s1 and s2, write code to check if s2 is a rotation of s1 using only one call to isSubstring (e.g., \"waterbottLe\" is a rotation of \"erbottLewat\").\r\n\r\n## 2. Hacker Rank\r\n\r\nThis is an online coding website. Here are some of the problems that I enjoyed solving->\r\n\r\n### 1. Algorithm\r\n\r\nThese are the problems from algorithm section ->\r\n\r\n* You are given a square matrix of size . Calculate the absolute difference of the sums across the two main diagonals. [Code](https://github.com/rajeshsurana/Java-Portfolio/blob/master/HackerRank/HackerRank/src/hackerrank/DiagonalDiff.java)\r\n* Your teacher has given you the task to draw the structure of a staircase. Being an expert programmer, you decided to make a program for the same. You are given the height of the staircase. You need to print a staircase as shown in the example. [Code](https://github.com/rajeshsurana/Java-Portfolio/blob/master/HackerRank/HackerRank/src/hackerrank/StairCase.java)\r\n* You are given time in AM/PM format. Convert this into a 24 hour format. Note Midnight is 12:00:00AM or 00:00:00 and 12 Noon is 12:00:00. [Code](https://github.com/rajeshsurana/Java-Portfolio/blob/master/HackerRank/HackerRank/src/hackerrank/timeFormat24.java)\r\n\r\n## 3. Miscellaneous\r\n\r\nCoding practive around the internet.\r\n\r\n### 1. Binary Tree [View Code](https://github.com/rajeshsurana/Java-Portfolio/blob/master/Miscellaneous/BinaryTree/src/binarytree/BinaryTree.java)\r\n* Returns true if given given target is in the binary tree.\r\n* Insert given data into binary tree.\r\n* Returns the number of nodes in the tree.\r\n* Returns the max root-to-leaf depth of the tree. \r\n* Returns the min value in a non-empty binary search tree.\r\n* Returns the max value in a non-empty binary search tree.\r\n* Prints the node values in the \"inorder\" order.\r\n* Given a tree and a sum, returns true if there is a path from the root down to a leaf, such that adding up all the values along the path equals the given sum.\r\n* Changes the tree into its mirror image.\r\n* Changes the tree by inserting a duplicate node on each nodes's .left.\r\n* Compares the receiver to another tree to see if they are structurally identical. \r\n* Tests if a tree meets the conditions to be a binary search tree (BST).\r\n","google":"UA-64574671-3","note":"Don't delete this file! It's used internally to help with page regeneration."}